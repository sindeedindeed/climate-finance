CREATE DATABASE bangladesh_projects;

\connect bangladesh_projects;

-- Table: Project
CREATE TABLE Project (
    project_id VARCHAR(50) PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    type VARCHAR(100),
    status VARCHAR(50),
    approval_fy INTEGER,
    beginning DATE,
    closing DATE,
    total_cost_usd DECIMAL(15,2),
    gef_grant DECIMAL(15,2),
    cofinancing DECIMAL(15,2),
    wash_finance DECIMAL(15,2),
    wash_finance_percent DECIMAL(5,2),
    beneficiaries VARCHAR(100),
    objectives TEXT
);

-- Table: Agency
CREATE TABLE Agency (
    agency_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL
);

-- Table: FundingSource
CREATE TABLE FundingSource (
    funding_source_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    dev_partner VARCHAR(255),
    grant_amount DECIMAL(15,2),
    loan_amount DECIMAL(15,2),
    counterpart_funding DECIMAL(15,2),
    non_grant_instrument VARCHAR(50)
);

-- Table: Location
CREATE TABLE Location (
    location_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    region VARCHAR(100)
);

-- Table: FocalArea
CREATE TABLE FocalArea (
    focal_area_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Table: WASHComponent
CREATE TABLE WASHComponent (
    project_id VARCHAR(50) PRIMARY KEY,
    presence BOOLEAN NOT NULL,
    water_supply_percent DECIMAL(5,2),
    sanitation_percent DECIMAL(5,2),
    public_admin_percent DECIMAL(5,2),
    FOREIGN KEY (project_id) REFERENCES Project(project_id) ON DELETE CASCADE
);

-- Junction Table: ProjectAgency
CREATE TABLE ProjectAgency (
    project_id VARCHAR(50),
    agency_id INTEGER,
    PRIMARY KEY (project_id, agency_id),
    FOREIGN KEY (project_id) REFERENCES Project(project_id) ON DELETE CASCADE,
    FOREIGN KEY (agency_id) REFERENCES Agency(agency_id) ON DELETE CASCADE
);

-- Junction Table: ProjectFundingSource
CREATE TABLE ProjectFundingSource (
    project_id VARCHAR(50),
    funding_source_id INTEGER,
    PRIMARY KEY (project_id, funding_source_id),
    FOREIGN KEY (project_id) REFERENCES Project(project_id) ON DELETE CASCADE,
    FOREIGN KEY (funding_source_id) REFERENCES FundingSource(funding_source_id) ON DELETE CASCADE
);

-- Junction Table: ProjectLocation
CREATE TABLE ProjectLocation (
    project_id VARCHAR(50),
    location_id INTEGER,
    PRIMARY KEY (project_id, location_id),
    FOREIGN KEY (project_id) REFERENCES Project(project_id) ON DELETE CASCADE,
    FOREIGN KEY (location_id) REFERENCES Location(location_id) ON DELETE CASCADE
);

-- Junction Table: ProjectFocalArea
CREATE TABLE ProjectFocalArea (
    project_id VARCHAR(50),
    focal_area_id INTEGER,
    PRIMARY KEY (project_id, focal_area_id),
    FOREIGN KEY (project_id) REFERENCES Project(project_id) ON DELETE CASCADE,
    FOREIGN KEY (focal_area_id) REFERENCES FocalArea(focal_area_id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_project_title ON Project(title);
CREATE INDEX idx_agency_name ON Agency(name);
CREATE INDEX idx_funding_source_name ON FundingSource(name);
CREATE INDEX idx_location_name ON Location(name);
CREATE INDEX idx_focal_area_name ON FocalArea(name);

-- Comments for documentation
COMMENT ON TABLE Project IS 'Stores information about environmental and climate projects in Bangladesh';
COMMENT ON TABLE Agency IS 'Stores information about implementing, executing, or accredited agencies';
COMMENT ON TABLE FundingSource IS 'Stores information about funding sources for projects';
COMMENT ON TABLE Location IS 'Stores project implementation locations';
COMMENT ON TABLE FocalArea IS 'Stores focal areas addressed by projects';
COMMENT ON TABLE WASHComponent IS 'Stores WASH component details for projects';
COMMENT ON TABLE ProjectAgency IS 'Junction table for Project-Agency many-to-many relationship';
COMMENT ON TABLE ProjectFundingSource IS 'Junction table for Project-FundingSource many-to-many relationship';
COMMENT ON TABLE ProjectLocation IS 'Junction table for Project-Location many-to-many relationship';
COMMENT ON TABLE ProjectFocalArea IS 'Junction table for Project-FocalArea many-to-many relationship';